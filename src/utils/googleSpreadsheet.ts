import {
  GoogleSpreadsheet,
  GoogleSpreadsheetRow,
  GoogleSpreadsheetWorksheet,
} from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { OutingsRowData } from '@/types/outings';

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
export const loadAuth = () => {
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.NEXT_PUBLIC_CLIENT_EMAIL,
    key: process.env.NEXT_PUBLIC_PRIVATE_KEY?.replace(/\\n/gm, '\n'),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  return serviceAccountAuth;
};

export const loadDoc = async (sheetId: string, auth: JWT) => {
  const doc = new GoogleSpreadsheet(sheetId, auth);
  await doc.loadInfo(); // loads document properties and worksheets
  return doc;
};

export const loadSheet = (doc: GoogleSpreadsheet, idx = 0) => {
  return doc.sheetsByIndex[idx];
};

export const loadRows = async (sheet: GoogleSpreadsheetWorksheet) => {
  const rows: GoogleSpreadsheetRow<OutingsRowData>[] =
    await sheet.getRows<OutingsRowData>();
  return rows;
};

// Extract only the necessary data to pass to the client-side
// const docData = {
//   title: doc.title,
//   sheetCount: doc.sheetCount,
//   spreadsheetId: doc.spreadsheetId,
//   // sheet,
//   rows,
// };
// res.status(200).json({ docData });
// };
