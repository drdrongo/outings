// import { NextApiRequest, NextApiResponse } from 'next';
// import { GoogleSpreadsheet } from 'google-spreadsheet';
// import { JWT } from 'google-auth-library';
// import { loadAuth, loadDoc, loadRows, loadSheet } from '@/utils/googleSpreadsheet';

// // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
// const serviceAccountAuth = new JWT({
//   // env var values here are copied from service account credentials generated by google
//   // see "Authentication" section in docs for more info
//   email: process.env.CLIENT_EMAIL,
//   key: process.env.PRIVATE_KEY?.replace(/\\n/gm, '\n'),
//   scopes: ['https://www.googleapis.com/auth/spreadsheets'],
// });

// export const handler = async (req: NextApiRequest, res: NextApiResponse) => {
//   const data = [
//     {
//       title: 'foo',
//       age: 21,
//       comments: ['what the hell is this?', 'why bother...', 'get outta here!'],
//     },
//     {
//       title: 'bar',
//       age: 93,
//       comments: ['not a lot of contributions...'],
//     },
//     {
//       title: 'baz',
//       age: 1,
//       comments: [],
//     },
//   ];
//   res.status(200).json({ data });
// };

// export default handler;

import { NextApiRequest, NextApiResponse } from 'next';
import {
  GoogleSpreadsheet,
  GoogleSpreadsheetRow,
  GoogleSpreadsheetWorksheet,
} from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { OutingsRowData } from '@/types/outings';
// import { loadAuth, loadDoc, loadRows, loadSheet } from '@/utils/googleSpreadsheet';

export const loadAuth = () => {
  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.CLIENT_EMAIL,
    key: process.env.PRIVATE_KEY,
    // ?.replace(/\\n/gm, '\n'),
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  return serviceAccountAuth;
};

export const loadDoc = async (sheetId: string, auth: JWT) => {
  console.log('loadDoc1');
  const doc = new GoogleSpreadsheet(sheetId, auth);
  console.log('loadDoc2');
  await doc.loadInfo(); // loads document properties and worksheets
  console.log('loadDoc3');
  return doc;
};

export const loadSheet = (doc: GoogleSpreadsheet, idx = 0) => {
  return doc.sheetsByIndex[idx];
};

export const loadRows = async (sheet: GoogleSpreadsheetWorksheet) => {
  const rows: GoogleSpreadsheetRow<OutingsRowData>[] =
    await sheet.getRows<OutingsRowData>();
  return rows;
};

export const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  console.log('its gonna be ok');
  console.log('#######');
  console.log(process.env.PRIVATE_KEY);
  console.log('#######');
  if (
    !process.env.CLIENT_EMAIL ||
    !process.env.PRIVATE_KEY ||
    !process.env.GOOGLE_SHEET_ID
  ) {
    console.error('MISSING API CREDENTIALS');
    return;
  }
  const jwt = loadAuth();
  console.log('its gonna bed ok');
  const doc = await loadDoc(process.env.GOOGLE_SHEET_ID, jwt);
  console.log('its gonna be offk');

  if (!doc) {
    console.error('doc not found');
    return;
  }
  console.log('its gonna be ok3');

  const sheet = loadSheet(doc);
  console.log('its gonna beasdf ok');

  const rows = await loadRows(sheet);
  console.log('its gonna be asdfasdfsdok');

  res.status(200).json({ rows });
};

export default handler;
