# Code challenge - Frontend

## Intro

An imaginary client has tasked us to build an app where their customers are able to search for movies, see details for a given movie, favorite that movie, see all favorited movies.

The app will mainly use themoviedb.org's API and will put the media front and center for the user.

## Steps to implement

1) Make an API key following the steps here: https://developers.themoviedb.org/3/getting-started/introduction
2) Film search (using this API endpoint **GET** https://api.themoviedb.org/3/search/movie?api_key={apikey}&query=<search_query>), display the films in whatever UI you want.
3) The user should be able to see details of the film (endpoint **GET** https://api.themoviedb.org/3/movie/{movie_id}?api_key={apikey})
4) The user should be able to favorite and unfavorite a movie (use whatever local storage that you think make sense)
5) The user should be able to see a list of favorite movies (and from there go to the detail movie screen)

## Tips

- Spend some time on transitions/animations and the small tweaks that make an app _nice to use_
- Focus on good naming
- If you end up with complex code, which isn't necessarily a bad thing, document the thoughts behind it

## Before you start

You can use any frameworks and/or architecture you like, any UI, make as many or little comments you like, just remember that we will be looking through the code and want to get a good understanding of your skills.

We know you are under a time limit and we will of course take this into account. It's perfectly fine to cut corners and focus on certain parts.

## How to deliver your code

- We prefer that you use git even though you shouldn't make your code public, that way we can track progress and the way you work
- Push to a private repository we invited
- Send it to your contact person as a link to a hosted location or if the zip is small enough, attach it. 

===============================================================================================================

Planning the app

what:s the best way of doing this app? 

Count the number of routes that will be required.

Routes: 
1. Latest movies list (optional)
2. Search for a movie
3. See details of a given movie
4. Favorite a movie (localstorage)
5. See all favorited movies

Focus points:
- Transitions/animations and the small tweaks that make an app nice to use.
- Good naming
- In case of complex code, documented thoughts behind it.

API/Resources list:
1. Latest movies list (optional)
- Latest movie api
/movie/latest

-- Get the top rated movies on TMDB.
/movie/top_rated


2. Search for a movie
-- Search for movies. (https://developers.themoviedb.org/3/search/search-keywords)
/search/movie

-- Search for keywords.
/search/keyword

3. See details of a given movie
-- Get the primary information about a movie.
/movie/{movie_id}

-- Get the images that belong to a movie. (https://developers.themoviedb.org/3/movies/get-movie-images)
/movie/{movie_id}/images

-- Get a list of recommended movies for a movie.
/movie/{movie_id}/recommendations



4. Favorite a movie (localstorage)
- Localstorage fn for favoriting

5. See all favorited movies
- (Is there an API for this?)
Ideas:
- Store ids of the movies, and fetch them in a list via an api call.
- Store more than just ids: 
    - Title, date, img url
- Clicking on it will open up the details of the favorited movie.


STEPS:
-- Set up proper architecture.
- HTTP Client - Axios
- Localstorage usage
- Styling libraries?
- Component Library? MUI? (If you use MUI then you will need to use theming probably)
- 


Recommended architecture:
https://dev.to/alexeagleson/how-to-build-scalable-architecture-for-your-nextjs-project-2pb7#project-setup

Linting / Pre-commit Husky setup:
https://dev.to/joshchu/how-to-setup-prettier-eslint-husky-and-lint-staged-with-a-nextjs-and-typescript-project-i7b



HOMEPAGE:
